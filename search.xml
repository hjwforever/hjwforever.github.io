<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JS 函数尾递归优化</title>
      <link href="posts/a0c0.html"/>
      <url>posts/a0c0.html</url>
      
        <content type="html"><![CDATA[<h3 id="JS-函数尾递归优化"><a href="#JS-函数尾递归优化" class="headerlink" title="JS 函数尾递归优化"></a>JS 函数尾递归优化</h3><blockquote><p>函数调用自身，称为递归。如果尾调用自身，就称为尾递归。<br>递归非常耗费内存，因为需要同时保存成千上百个调用帧，很容易发生“栈溢出”错误（stack overflow）。但对于尾递归来说，由于只存在一个调用帧，所以永远不会发生“栈溢出”错误。</p></blockquote><h3 id="第-N-个泰波那契数"><a href="#第-N-个泰波那契数" class="headerlink" title="第 N 个泰波那契数"></a>第 N 个泰波那契数</h3><p><a href="https://leetcode-cn.com/problems/n-th-tribonacci-number">Leetcode</a></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * @param {number} n * @return {number} */</span><span class="token keyword">function</span> <span class="token function">tribonacci</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> c1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> c2 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> c3 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> c1 <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token operator">></span><span class="token number">1</span> <span class="token punctuation">:</span> c3<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">tribonacci</span><span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">,</span> c2<span class="token punctuation">,</span> c3<span class="token punctuation">,</span> c1<span class="token operator">+</span>c2<span class="token operator">+</span>c3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">tribonacci</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 0</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">tribonacci</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">tribonacci</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">tribonacci</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 4</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">tribonacci</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 1389537</span></code></pre><h3 id="再举个例子，斐波那契数列的函数尾递归优化"><a href="#再举个例子，斐波那契数列的函数尾递归优化" class="headerlink" title="再举个例子，斐波那契数列的函数尾递归优化"></a>再举个例子，斐波那契数列的函数尾递归优化</h3><p><a href="https://leetcode-cn.com/problems/n-th-tribonacci-number/">Leetcode</a></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n <span class="token punctuation">,</span> c1<span class="token operator">=</span><span class="token number">1</span> <span class="token punctuation">,</span> c2<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span> n <span class="token operator">&lt;=</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> c2<span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">,</span> c2<span class="token punctuation">,</span> c1 <span class="token operator">+</span> c2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">fibonacci</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 573147844013817200000</span><span class="token function">fibonacci</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 7.0330367711422765e+208</span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>“尾调用优化”对递归操作意义重大，所以一些函数式编程语言将其写入了语言规格。ES6 亦是如此，第一次明确规定，所有 ECMAScript 的实现，都必须部署“尾调用优化”。</p><p>这就是说，ES6 中只要使用尾递归，就不会发生栈溢出（或者层层递归造成的超时），相对。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://es6.ruanyifeng.com/#docs/function#%E5%B0%BE%E9%80%92%E5%BD%92">函数的扩展 - ECMAScript 6入门 (ruanyifeng.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS数据类型及存储方式</title>
      <link href="posts/cef4.html"/>
      <url>posts/cef4.html</url>
      
        <content type="html"><![CDATA[<h1 id="JS数据类型及存储方式"><a href="#JS数据类型及存储方式" class="headerlink" title="JS数据类型及存储方式"></a>JS数据类型及存储方式</h1><h2 id="一、数据类型"><a href="#一、数据类型" class="headerlink" title="一、数据类型"></a>一、数据类型</h2><ol><li> 七种基本数据类型(值类型):</li></ol><ul><li><p>字符串(String)</p></li><li><p>数字(Number)</p></li><li><p>布尔值(Boolean)</p></li><li><p>空值(Null)</p></li><li><p>未定义(undefined)</p></li><li><p>符号(Symbol)</p></li><li><p>任意精度的整数(BigInt)</p></li></ul><ol start="2"><li> 引用数据类型:</li></ol><ul><li><p>对象(Object)</p></li><li><p>数组(Array)</p></li><li><p>函数(Function)</p></li></ul><h2 id="二、存储方式——栈和堆"><a href="#二、存储方式——栈和堆" class="headerlink" title="二、存储方式——栈和堆"></a>二、存储方式——栈和堆</h2><blockquote><p>基本数据类型的内存分配：直接将数据存储在<strong>栈空间</strong>。<br>引用数据类型的内存分配：将<strong>数据地址</strong>存储在<strong>栈空间</strong>，真正的数据存储在<strong>堆空间</strong>中。<br>堆内存是无序存储，可以根据引用直接获取。</p></blockquote><h3 id="内存分配"><a href="#内存分配" class="headerlink" title="内存分配"></a>内存分配</h3><p>①原始数据类型：<br>  <strong>栈内存</strong>  原始数据类型直接存储在栈(stack)中的简单数据段，占据空间小、大小比较稳定，属于被频繁使用数据，所以放入栈中存储；</p><p>②引用数据类型：<br>  <strong>堆内存</strong>  引用数据类型存储在堆(heap)中的对象,占据空间大、大小不固定, 而在栈内存中只是存了一个地址来表示对堆内存中的引用。</p><h2 id="三、简单类型与复杂类型传参"><a href="#三、简单类型与复杂类型传参" class="headerlink" title="三、简单类型与复杂类型传参"></a>三、简单类型与复杂类型传参</h2><ul><li><strong>简单类型传参</strong>：函数形参可看作一个变量，当把值类型变量传给形参，是把栈空间中的值复制一份传过去，<strong>形参与实参操作的不是同一个对象</strong>。</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">let</span> b <span class="token operator">=</span> a<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// 1</span>b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// !! 这里修改b，只会修改b的值，而a的值不受影响</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// 2</span></code></pre><ul><li><strong>复杂类型</strong>：函数形参可看作一个变量，当把引用类型变量传给形参，是把栈空间中的地址传过去，<strong>形参与实参保存同一个地址，操作同一个对象</strong>。</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'张三'</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> b <span class="token operator">=</span> a<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// { name: '张三' }</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// { name: '张三' }</span>b<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'李四'</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// !! 这里修改b，会修改b指向的实际对象，即与a指向的同一个的对象</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// { name: '李四' }</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// { name: '李四' }</span></code></pre><h2 id="四、数据类型判断方法"><a href="#四、数据类型判断方法" class="headerlink" title="四、数据类型判断方法"></a>四、数据类型判断方法</h2><h3 id="1-typeof"><a href="#1-typeof" class="headerlink" title="1. typeof"></a>1. <code>typeof</code></h3><blockquote><p>使用<code>typeof</code>进行判断时, 返回结果一般只包括这<strong>8</strong>种：<br><code>number</code>,<code>boolean</code>,<code>string</code>,<code>function</code>,<code>object</code>,<code>undefined</code>,<code>symbol</code>(ECMAScript 2015 新增),<code>bigint</code>(ECMAScript 2020新增)</p><p><strong>注意!! 没有<code>null</code></strong></p></blockquote><p>判断除了<code>null</code>的基本数据类型时，可以使用<code>typeof</code>关键字， 示例如下：</p><pre class=" language-javascript"><code class="language-javascript">   <span class="token keyword">typeof</span> <span class="token string">'123'</span>     <span class="token comment" spellcheck="true">//  string</span>   <span class="token keyword">typeof</span> <span class="token number">1</span>        <span class="token comment" spellcheck="true">//  number</span>   <span class="token keyword">typeof</span> <span class="token boolean">true</span>     <span class="token comment" spellcheck="true">//  boolean</span>   <span class="token keyword">typeof</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// symbol</span>   <span class="token keyword">typeof</span> 111n    <span class="token comment" spellcheck="true">//  bigint</span>   <span class="token keyword">typeof</span> undefined        <span class="token comment" spellcheck="true">// undefined</span>   <span class="token keyword">typeof</span> <span class="token keyword">null</span>     <span class="token comment" spellcheck="true">// object</span>   <span class="token keyword">typeof</span> <span class="token punctuation">{</span>a<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// object</span>   <span class="token keyword">function</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'123'</span><span class="token punctuation">)</span><span class="token punctuation">}</span>   <span class="token keyword">typeof</span> c     <span class="token comment" spellcheck="true">//  function</span></code></pre><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/typeof#%E7%A4%BA%E4%BE%8B">官方文档更多更详细的示例: https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/typeof#示例</a></p><blockquote><p>这里解释一下为何用typeof判断null时，得到的结果为何是对象object：<br>这是因为在 JavaScript 最初的实现中，JavaScript 中的值是由一个表示类型的标签和实际数据值表示的。<strong>对象的类型标签是 0。</strong>然而<strong>null的机器码全都是0</strong>，所以就被当成了对象看待.</p></blockquote><h3 id="2-constructor"><a href="#2-constructor" class="headerlink" title="2. constructor"></a>2. constructor</h3><blockquote><p>constructor是prototype对象上的属性，指向构造函数。</p><p>根据实例对象寻找属性的顺序，若实例对象上没有实例属性或方法时，就去原型链上寻找，因此，实例对象也是能使用constructor属性的。</p></blockquote><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> num  <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">var</span> str  <span class="token operator">=</span> <span class="token string">'abcdef'</span><span class="token punctuation">;</span><span class="token keyword">var</span> bool <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">var</span> arr  <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> json <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'wenzi'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span><span class="token number">25</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> func <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'this is function'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">var</span> und  <span class="token operator">=</span> undefined<span class="token punctuation">;</span><span class="token keyword">var</span> nul  <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">var</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> reg  <span class="token operator">=</span> <span class="token regex">/^[a-zA-Z]{5,20}$/</span><span class="token punctuation">;</span><span class="token keyword">var</span> error<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">var</span> tom <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// !! undefined和null没有constructor属性 !!</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>    tom<span class="token punctuation">.</span>constructor<span class="token operator">==</span>Person<span class="token punctuation">,</span>    num<span class="token punctuation">.</span>constructor<span class="token operator">==</span>Number<span class="token punctuation">,</span>    str<span class="token punctuation">.</span>constructor<span class="token operator">==</span>String<span class="token punctuation">,</span>    bool<span class="token punctuation">.</span>constructor<span class="token operator">==</span>Boolean<span class="token punctuation">,</span>    arr<span class="token punctuation">.</span>constructor<span class="token operator">==</span>Array<span class="token punctuation">,</span>    json<span class="token punctuation">.</span>constructor<span class="token operator">==</span>Object<span class="token punctuation">,</span>    func<span class="token punctuation">.</span>constructor<span class="token operator">==</span>Function<span class="token punctuation">,</span>    date<span class="token punctuation">.</span>constructor<span class="token operator">==</span>Date<span class="token punctuation">,</span>    reg<span class="token punctuation">.</span>constructor<span class="token operator">==</span>RegExp<span class="token punctuation">,</span>    error<span class="token punctuation">.</span>constructor<span class="token operator">==</span>Error<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//以上所有结果均为true</span></code></pre><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>1.<code>null</code>和<code>undefined</code>是无效的对象，因此是不会有<code>constructor</code>存在的，这两种类型的数据可以通过第四种方法来判断。(后面第三种方法 通过<code>instanceof</code>无法判断<code>null</code>和<code>undefined</code>也是相同道理)<br>2.JS对象的<code>constructor</code>是不稳定的，这个主要体现在自定义对象上，当开发者重写<code>prototype</code>后，原有的<code>constructor</code>会丢失，<code>constructor</code>会默认为<code>Object</code></p><h3 id="3-instanceof"><a href="#3-instanceof" class="headerlink" title="3. instanceof"></a>3. instanceof</h3><blockquote><p>语法: <code>object instanceof constructor</code></p><blockquote><p>object：某个实例对象</p><p>constructor: 某个构造函数</p></blockquote><p><strong>instanceof 运算符用来检测 <code>constructor.prototype</code> 是否存在于参数 <code>object</code> 的原型链上。</strong></p></blockquote><h4 id="一般用来判断引用数据类型的判断，如：Object，Function，Array，Date，RegExp等"><a href="#一般用来判断引用数据类型的判断，如：Object，Function，Array，Date，RegExp等" class="headerlink" title="一般用来判断引用数据类型的判断，如：Object，Function，Array，Date，RegExp等"></a>一般用来判断引用数据类型的判断，如：Object，Function，Array，Date，RegExp等</h4><blockquote><p>注意<code>null</code>和<code>undefined</code>是空值或未定义，是不存在prototype属性，没有原型链的，也就无法使用<code>instanceof</code>来判断了</p></blockquote><pre class=" language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>    <span class="token string">'advsz'</span> <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//false</span>    <span class="token number">123</span> <span class="token keyword">instanceof</span> <span class="token class-name">Number</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//false</span>    <span class="token boolean">false</span> <span class="token keyword">instanceof</span> <span class="token class-name">Boolean</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//false</span>    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//true</span>    <span class="token punctuation">{</span> a<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span>c<span class="token punctuation">:</span><span class="token number">3</span> <span class="token punctuation">}</span> <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//true</span>    <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'aaa'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">instanceof</span> <span class="token class-name">Function</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//true</span>    undefined <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//false</span>    <span class="token keyword">null</span> <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//false</span>    <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">Date</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//true</span>    <span class="token operator">/</span><span class="token operator">^</span>\<span class="token punctuation">[</span>object <span class="token punctuation">(</span>\S<span class="token operator">+</span><span class="token punctuation">)</span>\<span class="token punctuation">]</span>$<span class="token operator">/</span>g <span class="token keyword">instanceof</span> <span class="token class-name">RegExp</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//true</span>    <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">Error</span> <span class="token comment" spellcheck="true">//true</span><span class="token punctuation">)</span></code></pre><h4 id="instanceof-也可以判断一个实例是否是其父类型或者祖先类型的实例。"><a href="#instanceof-也可以判断一个实例是否是其父类型或者祖先类型的实例。" class="headerlink" title="instanceof 也可以判断一个实例是否是其父类型或者祖先类型的实例。"></a>instanceof 也可以判断一个实例是否是其父类型或者祖先类型的实例。</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Car</span><span class="token punctuation">(</span>make<span class="token punctuation">,</span> model<span class="token punctuation">,</span> year<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>make <span class="token operator">=</span> make<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>model <span class="token operator">=</span> model<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>year <span class="token operator">=</span> year<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> BWM <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>BWM<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> mycar <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BWM</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>mycar <span class="token keyword">instanceof</span> <span class="token class-name">BWM</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 返回 true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>mycar <span class="token keyword">instanceof</span> <span class="token class-name">Car</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 返回 true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>mycar <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 返回 true</span></code></pre><h4 id="instanceof-的实现原理"><a href="#instanceof-的实现原理" class="headerlink" title="instanceof 的实现原理"></a>instanceof 的实现原理</h4><blockquote><p>instanceof 主要的实现原理就是只要右边变量的 prototype 在左边变量的原型链上即可。</p><p>因此，instanceof 在查找的过程中会遍历左边变量的原型链，直到找到右边变量的 prototype，如果查找失败，则会返回 false，告诉我们左边变量并非是右边变量的实例。</p></blockquote><p>大致代码原理如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">new_instance_of</span><span class="token punctuation">(</span>leftVaule<span class="token punctuation">,</span> rightVaule<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> rightProto <span class="token operator">=</span> rightVaule<span class="token punctuation">.</span>prototype<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 取右表达式的 prototype 值</span>    leftVaule <span class="token operator">=</span> leftVaule<span class="token punctuation">.</span>__proto__<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 取左表达式的__proto__值</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>leftVaule <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>leftVaule <span class="token operator">===</span> rightProto<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        leftVaule <span class="token operator">=</span> leftVaule<span class="token punctuation">.</span>__proto__    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="4-通用及最准确的方法——Object-prototype-toString-call-方法"><a href="#4-通用及最准确的方法——Object-prototype-toString-call-方法" class="headerlink" title="4. 通用及最准确的方法——Object.prototype.toString.call()方法"></a>4. 通用及最准确的方法——<code>Object.prototype.toString.call()</code>方法</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> toString <span class="token operator">=</span> Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[object Number]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'123'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[object String]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[object Boolean]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[object Object]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[object Array]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[object Function]</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [object Date]</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>Math<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [object Math]</span><span class="token comment" spellcheck="true">//Since JavaScript 1.8.5</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>undefined<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [object Undefined]</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [object Null]</span></code></pre><h3 id="5-以上1-4两种方法的结合版，如果不是typeof能判断的基本数据类型，则使用进行判断，代码示例如下："><a href="#5-以上1-4两种方法的结合版，如果不是typeof能判断的基本数据类型，则使用进行判断，代码示例如下：" class="headerlink" title="5. 以上1,4两种方法的结合版，如果不是typeof能判断的基本数据类型，则使用进行判断，代码示例如下："></a>5. 以上1,4两种方法的结合版，如果不是<code>typeof</code>能判断的基本数据类型，则使用进行判断，代码示例如下：</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * 获取数据类型 * @param {any} target * @return {String} */</span><span class="token keyword">const</span> getType <span class="token operator">=</span> <span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> type <span class="token operator">=</span> <span class="token keyword">typeof</span> target<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">!=</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> type<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/^\[object (\S+)\]$/g</span><span class="token punctuation">,</span><span class="token string">'$1'</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>参考链接:</p><p>  <a href="https://blog.csdn.net/xiaolinlife/article/details/90518849">时清云  判断js数据类型的四种方法和原理</a></p><p>  <a href="https://www.cnblogs.com/hahazexia/p/8886829.html">hahazexia 判断数据类型的方法</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang安装教程【Windows/Linux】</title>
      <link href="posts/cd3e.html"/>
      <url>posts/cd3e.html</url>
      
        <content type="html"><![CDATA[<h2 id="Windows下安装Go"><a href="#Windows下安装Go" class="headerlink" title="Windows下安装Go"></a>Windows下安装Go</h2><h4 id="1-进入官网下载界面"><a href="#1-进入官网下载界面" class="headerlink" title="1. 进入官网下载界面"></a>1. 进入官网下载界面</h4><p><a href="https://golang.org/dl/">https://golang.org/dl/</a></p><h4 id="2-找到对应Windows平台的Go安装程序"><a href="#2-找到对应Windows平台的Go安装程序" class="headerlink" title="2. 找到对应Windows平台的Go安装程序"></a>2. 找到对应Windows平台的Go安装程序</h4><p><img src="https://cdn.jsdelivr.net/gh/hjwforever/images@main/img/Program/Go/dl-windows.png" alt="选择安装程序"></p><h4 id="3-下载完成后，点击安装"><a href="#3-下载完成后，点击安装" class="headerlink" title="3. 下载完成后，点击安装"></a>3. 下载完成后，点击安装</h4><blockquote><p>可以选择安装位置</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/hjwforever/images@main/img/Program/Go/dl-finish.png" alt="下载完成"></p><p><img src="https://cdn.jsdelivr.net/gh/hjwforever/images@main/img/Program/Go/install1.png" alt="开始安装"></p><p><img src="https://cdn.jsdelivr.net/gh/hjwforever/images@main/img/Program/Go/install2-1.png" alt="接受条款"></p><p><img src="https://cdn.jsdelivr.net/gh/hjwforever/images@main/img/Program/Go/install3.png" alt="选择安装位置"></p><p><img src="https://cdn.jsdelivr.net/gh/hjwforever/images@main/img/Program/Go/install4.png" alt="安装完成"></p><h4 id="4-验证安装成功"><a href="#4-验证安装成功" class="headerlink" title="4. 验证安装成功"></a>4. 验证安装成功</h4><p>通过以下命令检验是否安装成功</p><pre class=" language-bash"><code class="language-bash">go version</code></pre><p><img src="https://cdn.jsdelivr.net/gh/hjwforever/images@main/img/Program/Go/vertify.png" alt="验证安装"></p><blockquote><p>注意安装程序给环境变量中新增了个<strong>GOPATH</strong></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/hjwforever/images@main/img/Program/Go/path.png" alt="环境变量—GOPATH"></p><h2 id="Linux下安装Go"><a href="#Linux下安装Go" class="headerlink" title="Linux下安装Go"></a>Linux下安装Go</h2><h3 id="一、通过系统下载源安装Go"><a href="#一、通过系统下载源安装Go" class="headerlink" title="一、通过系统下载源安装Go"></a>一、通过系统下载源安装Go</h3><h4 id="1-Ubuntu、Debian或Linux-Mint安装Go语言"><a href="#1-Ubuntu、Debian或Linux-Mint安装Go语言" class="headerlink" title="(1) Ubuntu、Debian或Linux Mint安装Go语言"></a>(1) Ubuntu、Debian或Linux Mint安装Go语言</h4><ol><li>基于 Debian的 Linux 发行版本都可以使用 <code>apt-get</code> 命令来进行安装：</li></ol><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> golang</code></pre><ol start="2"><li>要查看当前系统安装的 Go 语言版本可以使用如下命令：</li></ol><pre class=" language-bash"><code class="language-bash">go version</code></pre><ol start="3"><li>由于 Go 代码必需保存在 workspace(工作区)中，所以我们必需在 <strong>Home</strong> 目录(例如 ~/workspace)创建一个workspace 目录并定义 <strong>GOPATH</strong> 环境变量指向该目录，这个目录将被 Go 工具用于保存和编辑二进制文件。</li></ol><pre class=" language-bash"><code class="language-bash"><span class="token function">mkdir</span> ~/workspace<span class="token keyword">echo</span> <span class="token string">'export GOPATH="<span class="token variable">$HOME</span>/workspace"'</span> <span class="token operator">>></span> ~/.bashrc<span class="token function">source</span> ~/.bashrc</code></pre><p>根据不同的需要，我们可以使用 apt-get 安装 Go tools：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> apt-cache search golang</code></pre><h4 id="2-CentOS、Fedora或RHEL安装Go语言"><a href="#2-CentOS、Fedora或RHEL安装Go语言" class="headerlink" title="(2) CentOS、Fedora或RHEL安装Go语言"></a>(2) CentOS、Fedora或RHEL安装Go语言</h4><ol><li>基于 Red Hat 的 Linux 发行版本都可以使用 yum 命令来进行安装：</li></ol><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> yum <span class="token function">install</span> golang</code></pre><p>要查看当前系统安装的 Go 语言版本可以使用如下命令：</p><pre class=" language-bash"><code class="language-bash">go version</code></pre><ol start="2"><li>接下来还是在 Home 目录(例如 ~/workspace)创建一个 workspace 目录并定义 GOPATH 环境变量指向该目录，这个目录将被 Go 工具用于保存和编辑二进制文件。</li></ol><pre class=" language-bash"><code class="language-bash"><span class="token function">mkdir</span> ~/workspace<span class="token keyword">echo</span> <span class="token string">'export GOPATH="<span class="token variable">$HOME</span>/workspace"'</span> <span class="token operator">>></span> ~/.bashrc<span class="token function">source</span> ~/.bashrc</code></pre><ol start="3"><li>根据不同的需要，我们可以使用 yum 安装 Go tools：</li></ol><pre class=" language-bash"><code class="language-bash">yum search golang</code></pre><h3 id="二、手动安装"><a href="#二、手动安装" class="headerlink" title="二、手动安装"></a>二、手动安装</h3><ol><li><p>下载安装包</p><blockquote><p>在<a href="https://golang.org/dl/">https://golang.org/dl/</a> 查找对应Linux的下载包地址</p></blockquote><p>64-bit Linux</p><pre class=" language-bash"><code class="language-bash"><span class="token function">wget</span> https://golang.org/dl/go1.16.6.linux-amd64.tar.gz</code></pre><p>32-bit Linux</p><pre class=" language-bash"><code class="language-bash"><span class="token function">wget</span> https://golang.org/dl/go1.16.6.linux-386.tar.gz</code></pre></li></ol><ol start="2"><li><p>提取并解压安装包到 /usr/local/go</p><blockquote><p><strong>重点注意：</strong>该步骤将在会删除以前在 /usr/local/go下的内容（如果有的话）</p></blockquote><p>在root用户下或者通过<code>sudo</code>命令执行以下命令</p><pre class=" language-bash"><code class="language-bash"><span class="token function">rm</span> -rf /usr/local/go <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> <span class="token function">tar</span> -C /usr/local -xzf go1.16.6.linux-amd64.tar.gz</code></pre></li></ol><ol start="3"><li><p>将下列环境变量添加到的 <strong>/etc/profile</strong> 配置文件</p><pre class=" language-bash"><code class="language-bash"><span class="token function">export</span> PATH<span class="token operator">=</span><span class="token variable">$PATH</span>:/usr/local/go/bin</code></pre><blockquote><p>注意添加完之后，使用命令<code>source $HOME/.profile</code>激活新的环境变量</p></blockquote></li></ol><ol start="4"><li><p>命令行验证Go安装成功：</p><pre class=" language-bash"><code class="language-bash">go version</code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 后端 </tag>
            
            <tag> 安装教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux·创建服务器安全登录账户</title>
      <link href="posts/6dec.html"/>
      <url>posts/6dec.html</url>
      
        <content type="html"><![CDATA[<h2 id="本地创建公钥"><a href="#本地创建公钥" class="headerlink" title="本地创建公钥"></a>本地创建公钥</h2><p>首先在本地机器生成自己的ssh登录所需要的公钥，具体命令如下：</p><pre class=" language-bash"><code class="language-bash">ssh-keygen -t rsa -b 4096</code></pre><p>然后，检查.ssh/目录下是否已经有了id_rsa.pub文件。</p><p><code>cat .ssh/id_rsa.pub</code></p><h2 id="服务创建新用户"><a href="#服务创建新用户" class="headerlink" title="服务创建新用户"></a>服务创建新用户</h2><ol><li><p>在服务器上创建一个新的用户，比如：newuser，具体命令如下：<br><code>adduser newuser</code><br>然后，设置该用户的密码，执行如下命令：<br><code>passwd newuser</code></p></li><li><p>(可选)接着，将该用户加入到/etc/sudoers文件中。<br>在sudoers文件中找到</p></li></ol><pre class=" language-bash"><code class="language-bash">root ALL<span class="token operator">=</span><span class="token punctuation">(</span>ALL<span class="token punctuation">)</span> ALL <span class="token comment" spellcheck="true"># 后面换行并将当前用户添加进去</span>newuer ALL<span class="token operator">=</span><span class="token punctuation">(</span>ALL<span class="token punctuation">)</span> ALL<span class="token punctuation">;</span></code></pre><blockquote><p>新增<code>newuser</code>的这一行就是将我们新建的用户<code>newuser</code>赋予 sudo 超级用户权限</p><p>如果希望这个登录用户只是作为一个登录到远端服务器的一个跳板，而不给予其更多权限的话，可以不进行这步“添加到sudoers”的操作</p></blockquote><h2 id="拷贝公钥"><a href="#拷贝公钥" class="headerlink" title="拷贝公钥"></a>拷贝公钥</h2><ol><li><p>在本地机器上将公钥拷贝到远端服务器上，具体命令如下：<br><code>ssh-copy-id newuser@&lt;&lt;youur server ip&gt;&gt;</code></p><blockquote><p>这里的<code>newuser</code>是之前操作步骤中在远端服务器新建的用户， 并可能需要输入其密码进行连接确认</p></blockquote></li></ol><ol start="2"><li><p>修改服务器sshd的配置文件<br>将最后三行中的两行改为如下：</p><pre class=" language-bash"><code class="language-bash">PasswordAuthentication no <span class="token comment" spellcheck="true"># 禁止通过密码登录</span>PermitRootLogin no <span class="token comment" spellcheck="true"># 禁止直接使用root用户登录</span></code></pre></li><li><p>重启sshd服务，执行如下命令：<br><code>systemctl restart sshd</code></p></li><li><p>检查下/root/.ssh/目录下的authroized_keys是否有不知名的公钥，如果有的话记得删除了。</p><blockquote><p>注意不要删除了以上步骤添加的公钥。</p></blockquote></li></ol><h2 id="测试连接"><a href="#测试连接" class="headerlink" title="测试连接"></a>测试连接</h2><p>  在拷贝完公钥时其实命令行就已经会提示可以进行 ssh 连接了，而不需要输入密码；</p><pre class=" language-bash"><code class="language-bash"><span class="token function">ssh</span> newuser@<span class="token operator">&lt;&lt;</span>youur server ip<span class="token operator">>></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安全 </tag>
            
            <tag> linux </tag>
            
            <tag> ssh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git趣味学习</title>
      <link href="posts/4c14.html"/>
      <url>posts/4c14.html</url>
      
        <content type="html"><![CDATA[<h2 id="代码管理"><a href="#代码管理" class="headerlink" title="代码管理"></a>代码管理</h2><blockquote><p>代码管理的重要性不言而喻，既可以降低灾难恢复代价，也利于团队协作开发，还利于重大更新的分支开发。</p></blockquote><p>有时候不小心写错或丢失项目代码， 通过代码管理工具来回溯项目代码往往可以成为我们的救命稻草。</p><p>谈到代码管理， 大家脑海中一定会浮现Git、SVN等。</p><p>不过相对于SVN， 具有分布式特性，更快速的Git是更受到个人喜爱的。下面来分享个可以通过沙盒趣味学习Git命令的网站。</p><h2 id="Git学习"><a href="#Git学习" class="headerlink" title="Git学习"></a>Git学习</h2><p><a href="https://learngitbranching.js.org/">LearnGitBranching</a>是一个非常有趣的Git学习网站，它不仅有生动有趣的可视化分支视图来帮助学习者理解Git工作流程，还有循序渐进的趣味闯关。<a href="https://github.com/pcottle/learnGitBranching">Github地址</a></p><h3 id="关卡示例"><a href="#关卡示例" class="headerlink" title="关卡示例"></a>关卡示例</h3><p>LearnGitBranching具有非常形象的可视化视图，让我们对git分支的操作及整个Git工作树的变化一目了然。<br><img src="https://cdn.jsdelivr.net/gh/hjwforever/images@main/img/2021/05/06/gitlearn2.png" alt="关卡示例"></p><h3 id="关卡"><a href="#关卡" class="headerlink" title="关卡"></a>关卡</h3><p>关卡设计得非常合理，从<code>git commit</code>提交开始学习，后面是<code>git branch</code>创建分支，<code>git checkout &lt;branch_name&gt;</code>切换分支等，最后还有关于远程仓库的关卡。<br><img src="https://cdn.jsdelivr.net/gh/hjwforever/images@main/img/2021/05/06/gitlearn3.png" alt="关卡"></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><blockquote><p>那么在LearnGitBranching，我们不仅可以把Git学得开心，还可以学得明白了 :)</p></blockquote><p>相关链接:<br><a href="https://learngitbranching.js.org/">LearnGitBranching</a><br><a href="https://github.com/pcottle/learnGitBranching">LearnGitBranching Github地址</a></p>]]></content>
      
      
      <categories>
          
          <category> 项目开发工程化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> 版本管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git 报错error:bad signature 0x00000000</title>
      <link href="posts/bc44.html"/>
      <url>posts/bc44.html</url>
      
        <content type="html"><![CDATA[<h3 id="情景描述"><a href="#情景描述" class="headerlink" title="情景描述"></a>情景描述</h3><p>强制关机并重启后，使用git提交代码时，git直接报错如下，特此记录。</p><pre class=" language-bash"><code class="language-bash">error: bad signature 0x00000000fatal: index <span class="token function">file</span> corrupt</code></pre><p><img src="https://cdn.jsdelivr.net/gh/hjwforever/images@main//img/2021/05/16/115212.png" alt="git-error"></p><h3 id="原因分析："><a href="#原因分析：" class="headerlink" title="原因分析："></a>原因分析：</h3><p><code>index file</code>在 git 里面一般指的是 <code>.git/index</code> 这个文件，这个文件保存的是**暂存区的信息(索引信息)**。</p><p><strong>报错说明这个文件已经损坏了</strong>。</p><h3 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h3><p><strong>直接删除这个文件，然后重启git，可以执行如下命令：</strong></p><ol><li><p>删除 .git/index 文件 (索引文件)， Linux环境代码如下（Windows环境直接删除该文件）</p><pre class=" language-bash"><code class="language-bash"><span class="token function">rm</span> -f .git/index <span class="token comment" spellcheck="true"># 如果为Windows环境下, 直接删除.git/index这个文件即可</span></code></pre></li><li><p>重启git</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> reset <span class="token comment" spellcheck="true"># 或者使用 git read-tree </span></code></pre></li></ol><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ul><li><p>强制关机导致git索引文件损坏， 报错后可以将索引文件删除并重启git。</p></li><li><p>注意在保存代码，退出编辑后再关机，防止破坏工作区索引文件。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 问题汇总 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> 版本管理 </tag>
            
            <tag> 报错解决 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS日期格式化</title>
      <link href="posts/5f64.html"/>
      <url>posts/5f64.html</url>
      
        <content type="html"><![CDATA[<h2 id="JS-日期时间格式化"><a href="#JS-日期时间格式化" class="headerlink" title="JS 日期时间格式化"></a>JS 日期时间格式化</h2><p>  在前端项目中， 我们往往需要对新建的时间对象(如 <code>new Date()</code> )进行格式化， 将其转换为对用户友好的格式。</p><p>  接下来简单列几个js时间格式化的方法吧, 如果你有更多更好的方法也可以分享一下哟 (＾Ｕ＾)ノ~</p><h2 id="一、JS内置API"><a href="#一、JS内置API" class="headerlink" title="一、JS内置API"></a>一、JS内置API</h2><p>  除了<code>new Date().getDate()</code>等最基本的API，其实还有其他帮助我们我们格式化日期时间的API。<br>  例如JS内置 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat">Intl.DateTimeFormat</a>等API，可以帮助我们快速方便地格式化时间格式，而且<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat">Intl.DateTimeFormat</a>这个API还可以用于i18n国际化。</p><pre class=" language-javascript"><code class="language-javascript">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Intl<span class="token punctuation">.</span>DateTimeFormat</span><span class="token punctuation">(</span><span class="token string">'en-US'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "05/04/2021"</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Intl<span class="token punctuation">.</span>DateTimeFormat</span><span class="token punctuation">(</span><span class="token string">'zh'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "2021/05/04"</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Intl<span class="token punctuation">.</span>DateTimeFormat</span><span class="token punctuation">(</span><span class="token string">'zh-GB'</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> dateStyle<span class="token punctuation">:</span> <span class="token string">'full'</span><span class="token punctuation">,</span> timeStyle<span class="token punctuation">:</span> <span class="token string">'long'</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// "2021年5月4日星期日GMT+8 上午11:23:16"</span></code></pre><h2 id="二、自定义函数"><a href="#二、自定义函数" class="headerlink" title="二、自定义函数"></a>二、自定义函数</h2><pre class=" language-javascript"><code class="language-javascript">formatDate <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>t<span class="token punctuation">,</span> str<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      yyyy<span class="token punctuation">:</span> t<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      yy<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token string">""</span> <span class="token operator">+</span> t<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      M<span class="token punctuation">:</span> t<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>      MM<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token string">"0"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> d<span class="token punctuation">:</span> t<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      dd<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token string">"0"</span> <span class="token operator">+</span> t<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> H<span class="token punctuation">:</span> t<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> HH<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token string">"0"</span> <span class="token operator">+</span> t<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      h<span class="token punctuation">:</span> t<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">12</span><span class="token punctuation">,</span>      hh<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token string">"0"</span> <span class="token operator">+</span> t<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      m<span class="token punctuation">:</span> t<span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      mm<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token string">"0"</span> <span class="token operator">+</span> t<span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> s<span class="token punctuation">:</span> t<span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ss<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token string">"0"</span> <span class="token operator">+</span> t<span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      w<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'日'</span><span class="token punctuation">,</span> <span class="token string">'一'</span><span class="token punctuation">,</span> <span class="token string">'二'</span><span class="token punctuation">,</span> <span class="token string">'三'</span><span class="token punctuation">,</span> <span class="token string">'四'</span><span class="token punctuation">,</span> <span class="token string">'五'</span><span class="token punctuation">,</span> <span class="token string">'六'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>t<span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/([a-z]+)/ig</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>$<span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> obj<span class="token punctuation">[</span>$<span class="token number">1</span><span class="token punctuation">]</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span></code></pre><h4 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token function">formatDate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'yyyy-MM-dd HH:mm:ss'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// "2021-05-04 19:10:57"</span></code></pre><h2 id="三、为Date原型添加format方法"><a href="#三、为Date原型添加format方法" class="headerlink" title="三、为Date原型添加format方法"></a>三、为Date原型添加format方法</h2><pre class=" language-javascript"><code class="language-javascript">Date<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>format <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>fmt<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token string">"M+"</span> <span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>                 <span class="token comment" spellcheck="true">//月份</span>    <span class="token string">"d+"</span> <span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token comment" spellcheck="true">//日</span>    <span class="token string">"h+"</span> <span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                   <span class="token comment" spellcheck="true">//小时</span>    <span class="token string">"m+"</span> <span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                 <span class="token comment" spellcheck="true">//分</span>    <span class="token string">"s+"</span> <span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                 <span class="token comment" spellcheck="true">//秒</span>    <span class="token string">"q+"</span> <span class="token punctuation">:</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//季度</span>    <span class="token string">"S"</span> <span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getMilliseconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span>             <span class="token comment" spellcheck="true">//毫秒</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token regex">/(y+)/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>fmt<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    fmt<span class="token operator">=</span>fmt<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>RegExp<span class="token punctuation">.</span>$<span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">-</span> RegExp<span class="token punctuation">.</span>$<span class="token number">1</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> k <span class="token keyword">in</span> o<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">"("</span><span class="token operator">+</span> k <span class="token operator">+</span><span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>fmt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    fmt <span class="token operator">=</span> fmt<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>RegExp<span class="token punctuation">.</span>$<span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>RegExp<span class="token punctuation">.</span>$<span class="token number">1</span><span class="token punctuation">.</span>length<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span>o<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"00"</span><span class="token operator">+</span> o<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token operator">+</span> o<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">return</span> fmt<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="使用方式-1"><a href="#使用方式-1" class="headerlink" title="使用方式"></a>使用方式</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> time <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd hh:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="四、第三方js库"><a href="#四、第三方js库" class="headerlink" title="四、第三方js库"></a>四、第三方js库</h2><blockquote><p>没有什么不是引入一个js库不能解决的，如果有，那就再多来几个 🤪</p></blockquote><p>  可以使用 <a href="http://momentjs.cn/">moment</a> 、<a href="https://github.com/iamkun/dayjs/blob/HEAD/docs/zh-cn/README.zh-CN.md">dayjs</a> 等第三方js库，具体可以看相关文档。emmmm，真香</p><h2 id="i18n国际化"><a href="#i18n国际化" class="headerlink" title="i18n国际化"></a>i18n国际化</h2><p>  但如果还涉及到多语言国际化<code>i18n</code>，除了 使用JS内置API <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat">Intl.DateTimeFormat</a> 个人还是还是推荐使用第三方库，如 <a href="http://momentjs.cn/">moment</a> 、<a href="https://github.com/iamkun/dayjs/blob/HEAD/docs/zh-cn/README.zh-CN.md">dayjs</a> 等，方便省事 😃</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nestjs 安装及使用</title>
      <link href="posts/2347.html"/>
      <url>posts/2347.html</url>
      
        <content type="html"><![CDATA[<h1 id="Nestjs-安装及使用"><a href="#Nestjs-安装及使用" class="headerlink" title="Nestjs 安装及使用"></a>Nestjs 安装及使用</h1><h2 id="Nestjs-简介"><a href="#Nestjs-简介" class="headerlink" title="Nestjs 简介"></a>Nestjs 简介</h2><blockquote><p><a href="https://github.com/nestjs/nest"><strong>Nest</strong></a> (NestJS)是一个用于构建高效、可扩展的<a href="https://nodejs.org/">Node.js</a>服务器端应用程序的开发框架。它利用 JavaScript 的渐进增强的能力，使用并完全支持 <a href="http://www.typescriptlang.org/">TypeScript</a>(仍然允许开发者使用纯 JavaScript 进行开发)，并结合了**OOP (面向对象编程)<strong>、</strong>FP (函数式编程)<strong>和</strong>FRP (函数响应式编程)**。</p></blockquote><h2 id="安装或直接构建项目"><a href="#安装或直接构建项目" class="headerlink" title="安装或直接构建项目"></a>安装或直接构建项目</h2><p>   要构建一个NestJs项目，方式有如三种</p><h3 id="方式①-使用Nest-CLI-构建项目-先全局安装-nest-cli"><a href="#方式①-使用Nest-CLI-构建项目-先全局安装-nest-cli" class="headerlink" title="方式①: 使用Nest CLI 构建项目 (先全局安装@nest/cli)"></a>方式①: 使用Nest CLI 构建项目 (先全局安装@nest/cli)</h3><blockquote><p>若要使用 Nest CLI 构建项目，请运行以下命令。这将创建一个新的项目目录，并使用核心的 Nest 文件和支撑模块填充该目录，从而为项目创建一个传统的基本结构。建议初学者使用 Nest CLI 创建新项目。</p></blockquote><pre class=" language-bash"><code class="language-bash">$ <span class="token function">npm</span> i -g @nestjs/cli$ nest new project-name</code></pre><h3 id="方式②-使用-Git-等版本控制工具-克隆NestJs项目的-starter-项目-启动项目-例子如下"><a href="#方式②-使用-Git-等版本控制工具-克隆NestJs项目的-starter-项目-启动项目-例子如下" class="headerlink" title="方式②: 使用 Git 等版本控制工具 克隆NestJs项目的 starter 项目 (启动项目), 例子如下"></a>方式②: 使用 <a href="https://git-scm.com/">Git</a> 等版本控制工具 克隆NestJs项目的 starter 项目 (启动项目), 例子如下</h3><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> clone https://github.com/nestjs/typescript-starter.git project$ <span class="token function">cd</span> project$ <span class="token function">npm</span> <span class="token function">install</span>$ <span class="token function">npm</span> run start</code></pre><blockquote><p>ps: 若要安装基于 JavaScript 的 starter project，请在执行上面的命令时使用 <a href="https://github.com/nestjs/javascript-starter.git">https://github.com/nestjs/javascript-starter.git</a></p></blockquote><h3 id="方式③-使用npm-等包管理器-从零构建"><a href="#方式③-使用npm-等包管理器-从零构建" class="headerlink" title="方式③: 使用npm 等包管理器 从零构建"></a>方式③: 使用npm 等包管理器 <strong>从零构建</strong></h3><blockquote><p>你还可以通过 <a href="https://www.npmjs.com/">npm</a> 等包管理器来安装的核心和支撑文件，从头开始手动创建一个新项目。<strong>当然，在这种情况下，你将自己担负起创建项目样板文件的工作。</strong></p></blockquote><h2 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h2><p>  这里推荐初学者使用第一种，熟练的话可以使用第二种。至于第三种， 如果你想深入了解整个NestJs项目构建及启动流程的话， 可以采用的。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nest </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node、npm及vue的下载、安装及配置</title>
      <link href="posts/6377.html"/>
      <url>posts/6377.html</url>
      
        <content type="html"><![CDATA[<h3 id="nodejs官网及安装包链接"><a href="#nodejs官网及安装包链接" class="headerlink" title="nodejs官网及安装包链接"></a>nodejs官网及安装包链接</h3><p><a href="https://nodejs.org/en/">Node.js官网</a>获取node安装程序</p><p><a href="https://nodejs.org/dist/v14.16.0/node-v14.16.0-x64.msi">v14.16.0</a> || <a href="https://nodejs.org/dist/v15.12.0/node-v15.12.0-x64.msi">v15.12.0</a>   （点击可以直接下载安装包）</p><h3 id="一、下载Nodejs并安装"><a href="#一、下载Nodejs并安装" class="headerlink" title="一、下载Nodejs并安装"></a>一、下载Nodejs并安装</h3><hr><h4 id="1-0-下载并打开安装程序"><a href="#1-0-下载并打开安装程序" class="headerlink" title="1.0 下载并打开安装程序"></a>1.0 下载并打开安装程序</h4><p>​    这里选择下载的是 <span style='color:green;'>v14.16.0</span></p><p><img src="https://img-blog.csdnimg.cn/img_convert/ec3b3a3a251782952b1b059b234e5fd8.png" alt="install"></p><h4 id="1-1-安装界面1"><a href="#1-1-安装界面1" class="headerlink" title="1.1 安装界面1:"></a>1.1 安装界面1:</h4><p><img src="https://img-blog.csdnimg.cn/img_convert/5f335f2c546c91d253679f12719c75f2.png" alt="2021/03/29/nodejs-install1"></p><h4 id="1-2-安装界面2"><a href="#1-2-安装界面2" class="headerlink" title="1.2 安装界面2:"></a>1.2 安装界面2:</h4><p>​    勾选 <span style='font-family:微软雅黑;background:white;font-size:16;color:blue;'>I accept the terms in the License Agreement</span> , 点击 <span style='color:red;background:white;font-size:14;font-family:red;'>Next</span></p><p><img src="https://img-blog.csdnimg.cn/img_convert/07728cb6dee4b4fb6c1c520f6970fc31.png" alt="2021/03/29/node-install2"></p><h4 id="1-3-安装界面3"><a href="#1-3-安装界面3" class="headerlink" title="1.3 安装界面3:"></a>1.3 安装界面3:</h4><p>​    选择安装位置，点击 <span style='font-family:微软雅黑;background:white;font-size:16;color:red;'>Next</span></p><p><img src="https://img-blog.csdnimg.cn/img_convert/2dfe31f5cb6948a6dfa2985e363e9d69.png" alt="2021/03/29/node-install3"></p><h4 id="1-4-安装界面4"><a href="#1-4-安装界面4" class="headerlink" title="1.4 安装界面4:"></a>1.4 安装界面4:</h4><p>​    选择安装内容， 可以直接点击 <span style='font-family:微软雅黑;background:white;font-size:16;color:red;'>Next</span></p><p>​    <em>另外这步会<span style='font-family:微软雅黑;background:white;font-size:16;color:green;'>自动</span>将 nodejs启动程序位置 加入到 系统环境变量Path 中</em></p><p><img src="https://img-blog.csdnimg.cn/img_convert/c00f6b97d2f60b09cff0658b49d3cc3f.png" alt="2021/03/29/node-install4"></p><h4 id="1-5-安装界面5、6："><a href="#1-5-安装界面5、6：" class="headerlink" title="1.5 安装界面5、6："></a>1.5 安装界面5、6：</h4><p>接下来其实可以一路点击<span style='font-family:微软雅黑;background:white;font-size:16;color:red;'>Next</span>或者<span style='font-family:微软雅黑;background:white;font-size:16;color:red;'>Install</span>开始安装了</p><p><img src="https://img-blog.csdnimg.cn/img_convert/8888a6a7fff9bb082093bc94613a3178.png" alt="2021/03/29/node-install5"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/f220eeece077b81aed26c411b0f84264.png" alt="2021/03/29/node-install6"></p><h4 id="1-6-Nodejs-安装完成"><a href="#1-6-Nodejs-安装完成" class="headerlink" title="1.6 Nodejs 安装完成"></a>1.6 Nodejs 安装完成</h4><p>​        点击<span style='font-family:微软雅黑;background:white;font-size:16;color:red;'>Finish</span>完成安装，下一步测试是否成功安装</p><p><img src="https://img-blog.csdnimg.cn/img_convert/094d08b2745184f76c0644450fdca1a3.png" alt="2021/03/29/node-install7"></p><h3 id="二、测试Nodejs是否安装成功"><a href="#二、测试Nodejs是否安装成功" class="headerlink" title="二、测试Nodejs是否安装成功"></a>二、测试Nodejs是否安装成功</h3><hr><h4 id="2-1-打开-cmd-下面两种方式皆可"><a href="#2-1-打开-cmd-下面两种方式皆可" class="headerlink" title="2.1 打开 cmd (下面两种方式皆可)"></a>2.1 打开 <span style='font-family:微软雅黑;background:white;font-size:16;color:blue;'>cmd</span> (下面两种方式皆可)</h4><h5 id="①Windows搜索框输入cmd"><a href="#①Windows搜索框输入cmd" class="headerlink" title="①Windows搜索框输入cmd"></a>①Windows搜索框输入cmd</h5><p><img src="https://img-blog.csdnimg.cn/img_convert/1a238423e5ce74f8b7efde5b0d8ccc2a.png" alt="2021/03/29/cmd"></p><h5 id="②-⌘-R-输入cmd-输入cmd"><a href="#②-⌘-R-输入cmd-输入cmd" class="headerlink" title="② ⌘ + R 输入cmd 输入cmd"></a>② <kbd>⌘</kbd> + <kbd>R</kbd> 输入cmd 输入cmd</h5><p><img src="https://img-blog.csdnimg.cn/img_convert/ef239de239fb7419a28fa53ad784995e.png" alt="2021/03/29/open-cmd"></p><h4 id="2-2-输入-node-v-及-npm-v-查看-node及npm版本"><a href="#2-2-输入-node-v-及-npm-v-查看-node及npm版本" class="headerlink" title="2.2 输入 node -v  及  npm -v 查看 node及npm版本"></a>2.2 输入 <code>node -v</code>  及  <code>npm -v </code>查看 node及npm版本</h4><p>​    可以看到node版本的正是<span style='font-family:微软雅黑;background:white;font-size:16;color:blue;'>14.16.0</span>，说明安装成功了。</p><p>​    并且自带安装了npm，但注意这个npm并不是最新版的npm版本</p><p><img src="https://img-blog.csdnimg.cn/img_convert/4af5e798aa9d37f2dfd3744675f41208.png" alt="2021/03/29/npm-v"></p><h3 id="三、设置npm源并安装-vue"><a href="#三、设置npm源并安装-vue" class="headerlink" title="三、设置npm源并安装 vue"></a>三、设置npm源并安装 vue</h3><hr><h5 id="3-1-更换npm源"><a href="#3-1-更换npm源" class="headerlink" title="3.1  更换npm源"></a>3.1  更换npm源</h5><p>因为npm默认使用的是国外的源，为了加快包的下载速度，我们可以设置为淘宝镜像源，命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token keyword">set</span> registry<span class="token operator">=</span>http://registry.npm.taobao.org</code></pre><h5 id="3-2-查看镜像源更换是否生效"><a href="#3-2-查看镜像源更换是否生效" class="headerlink" title="3.2  查看镜像源更换是否生效"></a>3.2  查看镜像源更换是否生效</h5><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> config get registry</code></pre><p><img src="https://img-blog.csdnimg.cn/img_convert/724fd3f35b9cfe323d21f4362ff0afbe.png" alt="2021/03/29/taobao-registry"></p><h5 id="3-3-设置全局安装的路径位置"><a href="#3-3-设置全局安装的路径位置" class="headerlink" title="3.3 设置全局安装的路径位置"></a>3.3 设置全局安装的路径位置</h5><pre class=" language-bash"><code class="language-bash">// 1. 查看当前npm全局安装的位置<span class="token function">npm</span> config get prefix// 2. 设置npm全局安装的位置 <span class="token punctuation">(</span>%Your_Path% 替换为你想要安装的路径位置, 如 E:\Soft\nodejs<span class="token punctuation">)</span><span class="token function">npm</span> config <span class="token keyword">set</span> %Your_Path%// 3. 再次查看你npm全局安装的位置<span class="token function">npm</span> config get prefix// 查看npm所有配置<span class="token function">npm</span> config list -l</code></pre><h5 id="3-4-升级npm"><a href="#3-4-升级npm" class="headerlink" title="3.4 升级npm"></a>3.4 升级npm</h5><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> <span class="token function">npm</span> -g// 查看npm版本<span class="token function">npm</span> -v</code></pre><h5 id="3-5-安装vue"><a href="#3-5-安装vue" class="headerlink" title="3.5 安装vue"></a>3.5 安装vue</h5><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> vue vue/cli -g</code></pre><h5 id="3-6-查看是否安装成功"><a href="#3-6-查看是否安装成功" class="headerlink" title="3.6 查看是否安装成功"></a>3.6 查看是否安装成功</h5><p>输入以下命令查看已安装的包</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> list -g</code></pre><p>可以看到有<span style='font-family:微软雅黑;font-size:16;color:green;'><a href="mailto:&#118;&#x75;&#101;&#x40;&#x32;&#x2e;&#x36;&#46;&#49;&#50;">&#118;&#x75;&#101;&#x40;&#x32;&#x2e;&#x36;&#46;&#49;&#50;</a></span>了，其实这已经可以跑前端的vue项目了 : )</p><p><img src="https://img-blog.csdnimg.cn/img_convert/ec3a039b553ecc9972f49c481325d6fa.png" alt="2021/03/30/npm-list"></p><h5 id="vue相关"><a href="#vue相关" class="headerlink" title="vue相关"></a>vue相关</h5><pre class=" language-bash"><code class="language-bash">// 启动vue可视化管理界面vue ui// 命令行创建新的vue项目应用 <span class="token punctuation">(</span><span class="token operator">&lt;</span>your_app_name<span class="token operator">></span> 换成项目小写名称,会新建一个目录<span class="token punctuation">)</span>vue create <span class="token operator">&lt;</span>your_app_name<span class="token operator">></span></code></pre><p>更多vue知识可以前往官网查看…<br>                  <a href="https://cn.vuejs.org/">Vue2</a> || <a href="https://www.vue3js.cn/docs/zh/">Vue3</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> node </tag>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS Canvas绘制正N边形</title>
      <link href="posts/adb.html"/>
      <url>posts/adb.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h3><blockquote><p>&lt;canvas&gt; 是 HTML5 新增的，一个可以使用脚本(通常为 JavaScript) 在其中绘制图像的 HTML 元素。它可以用来制作照片集或者制作简单(也不是那么简单)的动画，甚至可以进行实时视频处理和渲染。</p><p>它最初由苹果内部使用自己 MacOS X WebKit 推出，供应用程序使用像仪表盘的构件和 Safari 浏览器使用。后来，有人通过 Gecko 内核的浏览器 (尤其是 Mozilla和Firefox)，Opera 和 Chrome 和超文本网络应用技术工作组建议为下一代的网络技术使用该元素。</p><p>Canvas 是由 HTML 代码配合高度和宽度属性而定义出的可绘制区域。JavaScript 代码可以访问该区域，类似于其他通用的二维 API，通过一套完整的绘图函数来动态生成图形。</p></blockquote><p>初级教程网站：<a href="https://www.runoob.com/w3cnote/html5-canvas-intro.html">runoob.com</a></p><h3 id="二、内容"><a href="#二、内容" class="headerlink" title="二、内容"></a>二、内容</h3><p>今天主要记录并分享一下个人使用canvas绘制正N边形的思路及代码。</p><h3 id="三、思路"><a href="#三、思路" class="headerlink" title="三、思路"></a>三、思路</h3><ul><li>方法一、计算每个点的坐标，逐一连接</li></ul><p>。。。先介绍我使用的这种（欢迎补充）</p><ul><li>方法二、每次旋转画布一个内角的角度(2π / n) , 并与上个点连线</li></ul><h3 id="四、代码"><a href="#四、代码" class="headerlink" title="四、代码"></a>四、代码</h3><h4 id="1-canvas-js"><a href="#1-canvas-js" class="headerlink" title="1. canvas.js"></a>1. canvas.js</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * 在元素 selector 处使用canvas绘制中心坐标为 (x, y) 的边长(或顶点到中心的距离)为 l 的n边形 * @param {number} x 中心坐标 x * @param {number} y 中心坐标 y * @param {number} n 边数 * @param {number} l 边长(或顶点到中心的距离) * @param {boolean} isRadius 参数 l 是否为顶点到中心的距离, 默认为false, 即默认 l 为正 n 边形的边长 * @returns */</span><span class="token keyword">function</span> <span class="token function">drawPath</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> n<span class="token punctuation">,</span> l<span class="token punctuation">,</span> isRadius <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> myCanvas  <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> ctx <span class="token operator">=</span> myCanvas<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">'2d'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>ctx<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'不支持canvas!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">const</span> ang <span class="token operator">=</span> Math<span class="token punctuation">.</span>PI <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">/</span> n<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 旋转的角度</span>  <span class="token keyword">const</span> r <span class="token operator">=</span> isRadius <span class="token operator">?</span> l <span class="token punctuation">:</span> l<span class="token operator">/</span><span class="token number">2</span><span class="token operator">/</span>Math<span class="token punctuation">.</span><span class="token function">cos</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span>PI <span class="token operator">-</span> ang<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span>  ctx<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  ctx<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span><span class="token string">'rgba(255,0,0,.3)'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 填充淡红色</span>  ctx<span class="token punctuation">.</span>strokeStyle <span class="token operator">=</span><span class="token string">'hsl(120,50%,50%)'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 线条绿色</span>  ctx<span class="token punctuation">.</span>lineWidth <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 设置线宽</span>  ctx<span class="token punctuation">.</span><span class="token function">translate</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 原点移到x,y处，即要画的多边形中心</span>  ctx<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 据中心r距离处画点</span>  ctx<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ctx<span class="token punctuation">.</span><span class="token function">rotate</span><span class="token punctuation">(</span>ang<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 旋转</span>    ctx<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  ctx<span class="token punctuation">.</span><span class="token function">closePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  ctx<span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  ctx<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  ctx<span class="token punctuation">.</span><span class="token function">restore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">drawPath</span><span class="token punctuation">(</span><span class="token string">'#canvas'</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//在100,100处画一个边长为40的五边形</span><span class="token function">drawPath</span><span class="token punctuation">(</span><span class="token string">'#canvas'</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//在200,100处画一个半径为40的三角形</span><span class="token function">drawPath</span><span class="token punctuation">(</span><span class="token string">'#canvas'</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//在300,100处画一个半径为40的七边形</span><span class="token function">drawPath</span><span class="token punctuation">(</span><span class="token string">'#canvas'</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//在100,200处画一个边长为40的十五边形</span><span class="token function">drawPath</span><span class="token punctuation">(</span><span class="token string">'#canvas'</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//在100,200处画一个半径为40的四边形</span></code></pre><h4 id="2-test-html"><a href="#2-test-html" class="headerlink" title="2. test.html"></a>2. test.html</h4><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector"><span class="token id">#canvas</span> </span><span class="token punctuation">{</span>      <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> auto<span class="token punctuation">;</span>      <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>      <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid red<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>canvas</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>canvas<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>500<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>500<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    canvas not supported  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>canvas</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>canvas.js<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token script language-javascript"> </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h3 id="五、效果预览"><a href="#五、效果预览" class="headerlink" title="五、效果预览"></a>五、效果预览</h3><p><img src="https://cdn.jsdelivr.net/gh/hjwforever/images@main//img/2021/03/18/canvas.jpg" alt="canvas绘制n边形效果图"></p><h3 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a>六、总结</h3><p>记录了canvas采用旋转画布的方式来绘制N边形的方法</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> js </tag>
            
            <tag> canvas </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
